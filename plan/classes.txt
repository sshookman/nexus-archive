Server:
    - port
    - clients[]

    + __init__(port) # Starts server on port, accepts connections

Client(Thread):
    - cli
    - nexusManager

    + __init__(socket, address) # Inits thread with scoket and address
    + run() # Main execution loop for client thread
        # LOGIN
        username = cli.prompt("Username")
        if accountService.find(username):
            pswd = cli.password("Password")
            accountService.auth(username, pswd) # Exit on Failure
            cli.print("Welcome Back, {}".format(username))
        else:
            pswd = cli.password("New Password")
            while (pswd != cli.password("Retype Password")):
                pswd = cli.password("New Password")

            cli.print("Welcome, {}".format(username))

        # MAIN LOOP
        cmd = None
        while (cmd is not "exit"):
            page = nexusManager.getPage(cmd)
            cli.print(page)
            cmd = cli.prompt()

        # EXIT
        cli.print("Thanks for Playing!")

NexusManager:
    - pages
    - page
    
    + __init__() # Setup list of all nexus pages and default page to None
    + getPage(cmd=None)
        if (cmd is None):
            self.page = welcome_page
        else:
            page_name = self.page.findRoute(cmd)
            self.page = self.pages[page_name]

        return self.page

Page
    - display
    - routes

    + __init__(display, routes) # Initializes a page with display text and routes dict
    + findRoute(cmd):
        page = None
        for pattern, page_name in self.routes.items():
            if pattern.matches(cmd):
                page = page_name

        return page
