Server:
    - port
    - clients[]

    + __init__(port) # Starts server on port, accepts connections

Client(Thread):
    - cli
    - nexusManager

    + __init__(socket, address) # Inits thread with scoket and address
    + run() # Main execution loop for client thread
        # LOGIN
        username = cli.prompt("Username")
        if accountService.find(username):
            pswd = cli.password("Password")
            accountService.auth(username, pswd) # Exit on Failure
            cli.print("Welcome Back, {}".format(username))
        else:
            pswd = cli.password("New Password")
            while (pswd != cli.password("Retype Password")):
                pswd = cli.password("New Password")

            cli.print("Welcome, {}".format(username))

        # MAIN LOOP
        cmd = None
        while (cmd is not "exit"):
            page = nexusManager.getPage(cmd)
            cli.print(page)
            cmd = cli.prompt()

        # EXIT
        cli.print("Thanks for Playing!")

NexusManager:
    - pages
    - page
    
    + __init__() # Setup list of all nexus pages and default page to None
    + getPage(cmd=None)
        if (cmd is None):
            self.page = welcome_page
        else:
            page_name = self.page.findRoute(cmd)
            self.page = self.pages[page_name]

        return self.page

___DATABASE___

Entity:
    - id

Player:
    - id # NOT USED
    - entity_id FK-Entity.id
    - name
    - location_id FK-Entity.id # Current Location

Item:
    - id # NOT USED
    - entity_id FK-Entity.id
    - name
    - quantity
    - owner_id FK-Entity.id # Current Location/Owner

Location:
    - id # NOT USED
    - entity_id FK-Entity.id
    - display
    - next_location_entity_id FK # Automatically move to another location instead of using pathing

Path:
    - id # NOT USED
    - entity_id FK-Entity.id
    - destination_id FK-Entity.id
    - verbs #(use, open, move, access)
    - nouns #(north door, red door, big door, door)

___APPLICATION___

Entity
    - 1

    - 2

Player:
    - 1
    - 1
    - Harkken
    - 2


